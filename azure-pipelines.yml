# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

#trigger:
#- master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'Siegfried Azure Connection'

  # Function app name
  functionAppName: '4n3tzjp5hf23g-func'

  # Agent VM image name
  vmImageName: 'windows-2019'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/SimpleServiceBusSendReceiveAzureFuncs'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - task: Bash@3
      displayName: 'Confirm location of bicep files'
      inputs:
        targetType: 'inline'
        script: |         
          cd $(workingDirectory)
          echo "show $PWD"
          ls -al
          find . -name \*.bicep
          cp *.bicep $(Pipeline.Workspace)
          cd $(Pipeline.Workspace)
          echo "show pipeline.workspace"
          ls -al

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy Azure Resources with Azure Deployment Group'
            inputs:
              azureSubscription: 'Siegfried Azure Connection'
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: 'az deployment group create --name ServiceBusSimpleSendReceive --resource-group rg_ServiceBusSimpleSendReceive   --template-file  $(Pipeline.Workspace)/drop2/deploy-ServiceBusSimpleSendReceive.bicep'

          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionApp
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              